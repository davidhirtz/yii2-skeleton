<?php

declare(strict_types=1);

namespace davidhirtz\yii2\skeleton\tests\unit\widgets\bootstrap;

use Codeception\Test\Unit;
use davidhirtz\yii2\skeleton\helpers\ArrayHelper;
use davidhirtz\yii2\skeleton\widgets\bootstrap\ActiveField;
use davidhirtz\yii2\skeleton\widgets\bootstrap\ActiveForm;
use davidhirtz\yii2\skeleton\widgets\forms\DynamicRangeDropdown;
use yii\base\Model;

class ActiveFormTest extends Unit
{
    public function testAttributeWithExistingFieldMethod(): void
    {
        $content = TestActiveForm::widget([
            'fields' => ['custom'],
        ]);

        $needle = '<input type="text" id="testmodel-custom" class="form-control" name="TestModel[custom]">';
        self::assertStringContainsString($needle, $content);

        $content = TestActiveForm::widget([
            'fields' => [
                ['custom', 'inputOptions' => ['id' => 'custom-id']],
            ],
        ]);

        $needle = '<input type="text" id="custom-id" class="form-control" name="TestModel[custom]">';
        self::assertStringContainsString($needle, $content);
    }

    public function testAttributeWithAutogeneratedField()
    {
        $content = TestActiveForm::widget([
            'fields' => [
                'value',
            ],
        ]);

        $needle = '<input type="text" id="testmodel-value" class="form-control" name="TestModel[value]">';
        self::assertStringContainsString($needle, $content);

        $content = TestActiveForm::widget([
            'fields' => [
                ['value', 'hidden'],
            ],
        ]);

        $needle = '<input type="hidden" id="testmodel-value" class="form-control" name="TestModel[value]">';
        self::assertStringContainsString($needle, $content);

        $content = TestActiveForm::widget([
            'fields' => [
                ['value', 'textarea', 'fieldOptions' => [
                    'inputOptions' => ['rows' => 5],
                ]],
            ],
        ]);

        $needle = '<textarea id="testmodel-value" class="form-control" name="TestModel[value]" rows="5"></textarea>';
        self::assertStringContainsString($needle, $content);

        $content = TestActiveForm::widget([
            'fields' => [
                ['value', 'textarea', 'rows' => 5],
            ],
        ]);

        self::assertStringContainsString($needle, $content);

        $content = TestActiveForm::widget([
            'fields' => [
                [
                    'value',
                    'dropDownList',
                    'items' => ArrayHelper::getColumn(TestModel::getValues(), 'name'),
                ],
            ],
        ]);

        $needle = "<select id=\"testmodel-value\" class=\"form-select\" name=\"TestModel[value]\">\n<option value=\"value1\">Value 1</option>";
        self::assertStringContainsString($needle, $content);


        $content = TestActiveForm::widget([
            'fields' => [
                ['value', DynamicRangeDropdown::class],
            ],
        ]);

        self::assertStringContainsString($needle, $content);
    }
}

class TestActiveForm extends ActiveForm
{
    #[\Override]
    public function init(): void
    {
        $this->action = '/test';
        $this->enableClientScript = false;
        $this->model = new TestModel();

        parent::init();
    }

    /**
     * @noinspection PhpUnused
     */
    public function customField($options = []): ActiveField|string
    {
        return $this->field($this->model, 'custom', $options);
    }
}

class TestModel extends Model
{
    public ?string $custom = null;
    public ?string $value = null;

    #[\Override]
    public function safeAttributes(): array
    {
        return array_keys($this->attributes);
    }

    public static function getValues(): array
    {
        return [
            'value1' => [
                'name' => 'Value 1'
            ],
            'value2' => [
                'name' => 'Value 2'
            ],
            'value3' => [
                'name' => 'Value 3'
            ],
        ];
    }
}
