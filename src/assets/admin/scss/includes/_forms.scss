@mixin custom-form-validation-state($state, $color) {

  .#{$state}-feedback {
    display: none;
    width: 100%;
    margin-top: $form-feedback-margin-top;
    font-size: $form-feedback-font-size;
    color: $color;
  }

  //
  //.#{$state}-tooltip{
  //	position:absolute;
  //	top:100%;
  //	z-index:5;
  //	display:none;
  //	max-width:100%; // Contain to parent when possible
  //	padding:$tooltip-padding-y $tooltip-padding-x;
  //	margin-top:.1rem;
  //	font-size:$tooltip-font-size;
  //	line-height:$line-height-base;
  //	color:color-yiq($color);
  //	background-color:rgba($color, $tooltip-opacity);
  //	@include border-radius($tooltip-border-radius);
  //}

  .is-#{$state} {

    .form-control {
      border-color: $color;

      &:focus {
        border-color: $color;
        box-shadow: 0 0 0 $input-focus-width rgba($color, .25);
      }
    }

    .input-group-text {
      border-color: $color;
      background: lighten($color, 40%);
    }

    .#{$state}-feedback,
    ~ .#{$state}-tooltip {
      display: block;
    }

    .form-check, .col-form-label, .form-check-label, & + .custom-control-label {
      color: $color;
    }
  }
}

//

.form-control {
  display: block;
  width: 100%;
  padding: $input-padding-y $input-padding-x;
  font-size: $font-size-base;
  line-height: $input-line-height;
  color: $input-color;
  background-color: $input-bg;
  background-clip: padding-box;
  border: $input-border-width solid $input-border-color;

  // Note: This has no effect on <select>s in some browsers, due to the limited stylability of `<select>`s in CSS.
  @if $enable-rounded {
    // Manually use the if/else instead of the mixin to account for iOS override
    border-radius: $input-border-radius;
  } @else {
    // Otherwise undo the iOS default
    border-radius: 0;
  }

  @include box-shadow($input-box-shadow);
  @include transition($input-transition);

  // Customize the `:focus` state to imitate native WebKit styles.
  &:focus {
    color: $input-focus-color;
    background-color: $input-focus-bg;
    border-color: $input-focus-border-color;
    outline: 0;
    // Avoid using mixin so we can pass custom focus shadow properly
    @if $enable-shadows {
      box-shadow: $input-box-shadow, $input-focus-box-shadow;
    } @else {
      box-shadow: $input-focus-box-shadow;
    }
  }

  // Unstyle the caret on `<select>`s in IE10+.
  &::-ms-expand {
    background-color: transparent;
    border: 0;
  }

  // Placeholder
  &::placeholder {
    color: $input-placeholder-color;
    // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526.
    opacity: 1;
  }

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &:disabled,
  &[readonly] {
    background-color: $input-disabled-bg;
    // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655.
    opacity: 1;
  }

  // This brings date forms to the same height as input fields for Safari
  &::-webkit-datetime-edit-year-field,
  &::-webkit-datetime-edit-month-field,
  &::-webkit-datetime-edit-day-field,
  &::-webkit-datetime-edit-hour-field,
  &::-webkit-datetime-edit-minute-field,
  &::-webkit-datetime-edit-second-field,
  &::-webkit-datetime-edit-meridiem-field,
    // This is needed for Chrome
  &::-webkit-calendar-picker-indicator {
    padding: 0;
  }
}

.form-control {
  &[type=date], &[type=time] {
    height: $input-height; // Fixes height on Safari
    -webkit-text-fill-color: $input-color; // Fixes color on Safari
    opacity: 1; // Required for iOS Safari
  }
}

select.form-control {
  height: $input-height;

  &:focus::-ms-value {
    // Suppress the nested default white text on blue background highlight given to
    // the selected option text when the (still closed) <select> receives focus
    // in IE and (under certain conditions) Edge, as it looks bad and cannot be made to
    // match the appearance of the native widget.
    // See https://github.com/twbs/bootstrap/issues/19398.
    color: $input-color;
    background-color: $input-bg;
  }
}

// Make file inputs better match text inputs by forcing them to new lines.
.form-control-file,
.form-control-range {
  display: block;
  width: 100%;
  height: $input-height;

  &::-webkit-file-upload-button {
    height: 100%;
    border: none;
    border-radius: $btn-border-radius;
    background-color: $secondary;
    color: color-yiq($secondary);
  }
}

//
// Labels
//

// For use with horizontal and inline forms, when you need the label (or legend)
// text to align with the form controls.
.col-form-label {
  padding-top: $app-form-label-padding-top;
  margin-bottom: 0; // Override the `<label>/<legend>` default
  font-size: inherit; // Override the `<legend>` default
  line-height: $input-line-height;
  font-weight: $app-form-label-font-weight;

  .required &:after {
    content: " *";
  }

  @include media-breakpoint-up(md) {
    text-align: right;
  }
}

@if ($app-form-content-label-padding-top) {
  .col-form-content-label {
    padding-top: $app-form-content-label-padding-top;
  }
}

.form-control-plaintext {
  display: block;
  width: 100%;
  padding: $input-padding-y $input-padding-x;
  border: $input-border-width solid transparent;
  margin-bottom: 0; // match inputs if this class comes on inputs with default margins
  line-height: $input-line-height;
  color: $input-plaintext-color;
  background-color: transparent;
  outline: none !important;

  &.form-control-sm,
  &.form-control-lg {
    padding-right: 0;
    padding-left: 0;
  }
}

select.form-control {
  appearance: none;

  &[size], &[multiple] {
    height: auto;
  }

  // Following is a workaround for Chrome and FF, because Safari doesn't allow styling of option
  // tags but for the select tag.
  option {
    margin: 0 (-$input-padding-x);
    padding: $input-padding-y 0 $input-padding-y $input-padding-x;
    height: $input-height;

    &:first-child {
      margin-top: -$input-padding-y;
    }

    &:last-child {
      margin-bottom: -$input-padding-y;
    }
  }
}

select[multiple].form-control {
  overflow-y: auto;
}

// Removes weird whitespace in FF and adds padding to options on multiple.
@-moz-document url-prefix() {
  select.form-control {
    text-indent: -2px;
  }

  //select[size].form-control option, select[multiple].form-control option {
  //  text-indent: -3px;
  //}
}

textarea.form-control {
  height: auto;
}

// stylelint-enable no-duplicate-selectors

// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.form-group {
  margin-bottom: $form-group-margin-bottom;
}

.form-text {
  display: block;

  &:not(:first-child) {
    margin-top: $form-text-margin-top;
  }
}

// Form grid
//
// Special replacement for our grid system's `.row` for tighter form layouts.

//.form-row{
//	display:flex;
//	flex-wrap:wrap;
//	margin-right:-5px;
//	margin-left:-5px;
//
//	> .col,
//	> [class*="col-"]{
//		padding-right:5px;
//		padding-left:5px;
//	}
//}

// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.

//.form-check{
//	position:relative;
//	display:block;
//	padding-left:$form-check-input-gutter;
//}
//
//.form-check-input{
//	position:absolute;
//	margin-top:$form-check-input-margin-y;
//	margin-left:-$form-check-input-gutter;
//
//	&:disabled ~ .form-check-label{
//		color:$text-muted;
//	}
//}

.form-check-label {
  margin-bottom: 0; // Override default `<label>` bottom margin
}

.form-check-inline {
  display: inline-flex;
  align-items: baseline;
  padding-left: 0; // Override base .form-check
  margin-right: $form-check-inline-margin-x;

  // Undo .form-check-input defaults and add some `margin-right`.
  .custom-control-input {
    //position:static;
    //margin-top:-2px;
    margin-right: $form-check-inline-input-margin-x;
    //margin-left:0;
  }
}

@include custom-form-validation-state("valid", $form-feedback-valid-color);
@include custom-form-validation-state("invalid", $form-feedback-invalid-color);

// Inline forms
//
// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
// forms begin stacked on extra small (mobile) devices and then go inline when
// viewports reach <768px.
//
// Requires wrapping inputs and labels with `.form-group` for proper display of
// default HTML form controls and our custom form controls (e.g., input groups).

//.form-inline{
//	display:flex;
//	flex-flow:row wrap;
//	align-items:center; // Prevent shorter elements from growing to same height as others (e.g., small buttons growing to normal sized button height)
//
//	// Because we use flex, the initial sizing of checkboxes is collapsed and
//	// doesn't occupy the full-width (which is what we want for xs grid tier),
//	// so we force that here.
//	.form-check{
//		width:100%;
//	}
//
//	// Kick in the inline
//	@include media-breakpoint-up(sm){
//		label{
//			display:flex;
//			align-items:center;
//			justify-content:center;
//			margin-bottom:0;
//		}
//
//		// Inline-block all the things for "inline"
//		.form-group{
//			display:flex;
//			flex:0 0 auto;
//			flex-flow:row wrap;
//			align-items:center;
//			margin-bottom:0;
//		}
//
//		// Allow folks to *not* use `.form-group`
//		.form-control{
//			display:inline-block;
//			width:auto; // Prevent labels from stacking above inputs in `.form-group`
//			vertical-align:middle;
//		}
//
//		// Make static controls behave like regular ones
//		.form-control-plaintext{
//			display:inline-block;
//		}
//
//		.input-group,
//		.custom-select{
//			width:auto;
//		}
//
//		// Remove default margin on radios/checkboxes that were used for stacking, and
//		// then undo the floating of radios and checkboxes to match.
//		.form-check{
//			display:flex;
//			align-items:center;
//			justify-content:center;
//			width:auto;
//			padding-left:0;
//		}
//		.form-check-input{
//			position:relative;
//			margin-top:0;
//			margin-right:$form-check-input-margin-x;
//			margin-left:0;
//		}
//	}
//}

//:focus{
//	outline:0;
//}

/**
 * Default pointers for all buttons.
 */
input[type="button"], input[type="submit"], button {
  cursor: pointer;
}

//.btn{
//	font-size: inherit;
//}

.btn + .btn, .btn + .btn-group, .btn-group + .btn {
  margin-left: 5px;
}

.btn-list .btn {
  margin: 5px 5px 0 0;
}

.form-group-buttons {
  margin-top: $app-form-group-buttons-margin-top;
}

.form-group:last-child {
  margin-bottom: 0;
}

.form-group-sticky {
  position: $app-form-sticky-position;

  @if ($app-grid-view-footer-position == 'sticky') {
    bottom: 0;
    padding-bottom: $app-form-sticky-padding-bottom;
    border-top: $app-form-sticky-border-width $border-style $border-color;
    background-color: $card-bg;
    z-index: 2;
  }
}

/**
 * Inputs & labels.
 */
//.control-label.error, .input-group-addon.error{
//	color:$danger;
//}
//
//.form-control.error{
//	background:$danger;
//}

.form-control.month, .form-control.day {
  display: inline-block;
  margin-right: 2%;
  width: 48%;
}

.form-control.day {
  width: 20%;
}

.form-control.year {
  display: inline-block;
  width: 28%;
}
