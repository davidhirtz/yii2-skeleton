{
  "version": 3,
  "sources": ["../../../../node_modules/date-fns/constants.js", "../../../../node_modules/date-fns/constructFrom.js", "../../../../node_modules/date-fns/toDate.js", "../../../../node_modules/date-fns/_lib/defaultOptions.js", "../../../../node_modules/date-fns/startOfWeek.js", "../../../../node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js", "../../../../node_modules/date-fns/_lib/normalizeDates.js", "../../../../node_modules/date-fns/startOfDay.js", "../../../../node_modules/date-fns/differenceInCalendarDays.js", "../../../../node_modules/date-fns/differenceInCalendarMonths.js", "../../../../node_modules/date-fns/getQuarter.js", "../../../../node_modules/date-fns/differenceInCalendarQuarters.js", "../../../../node_modules/date-fns/differenceInCalendarWeeks.js", "../../../../node_modules/date-fns/differenceInCalendarYears.js", "../../../../node_modules/date-fns/_lib/getRoundingMethod.js", "../../../../node_modules/date-fns/differenceInHours.js", "../../../../node_modules/date-fns/differenceInMilliseconds.js", "../../../../node_modules/date-fns/differenceInMinutes.js", "../../../../node_modules/date-fns/differenceInSeconds.js", "../../../../node_modules/date-fns/intlFormatDistance.js", "../ts/admin.ts"],
  "sourcesContent": ["/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It's useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\nexport const constructFromSymbol = Symbol.for(\"constructDateFrom\");\n", "import { constructFromSymbol } from \"./constants.js\";\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from \"./constructFrom/date-fns\";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nexport function constructFrom(date, value) {\n  if (typeof date === \"function\") return date(value);\n\n  if (date && typeof date === \"object\" && constructFromSymbol in date)\n    return date[constructFromSymbol](value);\n\n  if (date instanceof Date) return new date.constructor(value);\n\n  return new Date(value);\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n", "import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return constructFrom(context || argument, argument);\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n", "let defaultOptions = {};\n\nexport function getDefaultOptions() {\n  return defaultOptions;\n}\n\nexport function setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n", "import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date, options?.in);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeek;\n", "import { toDate } from \"../toDate.js\";\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n", "import { constructFrom } from \"../constructFrom.js\";\n\nexport function normalizeDates(context, ...dates) {\n  const normalize = constructFrom.bind(\n    null,\n    context || dates.find((date) => typeof date === \"object\"),\n  );\n  return dates.map(normalize);\n}\n", "import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfDay} function options.\n */\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport function startOfDay(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfDay;\n", "import { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { millisecondsInDay } from \"./constants.js\";\nimport { startOfDay } from \"./startOfDay.js\";\n\n/**\n * The {@link differenceInCalendarDays} function options.\n */\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - The options object\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nexport function differenceInCalendarDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const laterStartOfDay = startOfDay(laterDate_);\n  const earlierStartOfDay = startOfDay(earlierDate_);\n\n  const laterTimestamp =\n    +laterStartOfDay - getTimezoneOffsetInMilliseconds(laterStartOfDay);\n  const earlierTimestamp =\n    +earlierStartOfDay - getTimezoneOffsetInMilliseconds(earlierStartOfDay);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarDays;\n", "import { normalizeDates } from \"./_lib/normalizeDates.js\";\n\n/**\n * The {@link differenceInCalendarMonths} function options.\n */\n\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of calendar months\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\nexport function differenceInCalendarMonths(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const yearsDiff = laterDate_.getFullYear() - earlierDate_.getFullYear();\n  const monthsDiff = laterDate_.getMonth() - earlierDate_.getMonth();\n\n  return yearsDiff * 12 + monthsDiff;\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarMonths;\n", "import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getQuarter} function options.\n */\n\n/**\n * @name getQuarter\n * @category Quarter Helpers\n * @summary Get the year quarter of the given date.\n *\n * @description\n * Get the year quarter of the given date.\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The quarter\n *\n * @example\n * // Which quarter is 2 July 2014?\n * const result = getQuarter(new Date(2014, 6, 2));\n * //=> 3\n */\nexport function getQuarter(date, options) {\n  const _date = toDate(date, options?.in);\n  const quarter = Math.trunc(_date.getMonth() / 3) + 1;\n  return quarter;\n}\n\n// Fallback for modularized imports:\nexport default getQuarter;\n", "import { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { getQuarter } from \"./getQuarter.js\";\n\n/**\n * The {@link differenceInCalendarQuarters} function options.\n */\n\n/**\n * @name differenceInCalendarQuarters\n * @category Quarter Helpers\n * @summary Get the number of calendar quarters between the given dates.\n *\n * @description\n * Get the number of calendar quarters between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of calendar quarters\n *\n * @example\n * // How many calendar quarters are between 31 December 2013 and 2 July 2014?\n * const result = differenceInCalendarQuarters(\n *   new Date(2014, 6, 2),\n *   new Date(2013, 11, 31)\n * )\n * //=> 3\n */\nexport function differenceInCalendarQuarters(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const yearsDiff = laterDate_.getFullYear() - earlierDate_.getFullYear();\n  const quartersDiff = getQuarter(laterDate_) - getQuarter(earlierDate_);\n\n  return yearsDiff * 4 + quartersDiff;\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarQuarters;\n", "import { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { millisecondsInWeek } from \"./constants.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\n\n/**\n * The {@link differenceInCalendarWeeks} function options.\n */\n\n/**\n * @name differenceInCalendarWeeks\n * @category Week Helpers\n * @summary Get the number of calendar weeks between the given dates.\n *\n * @description\n * Get the number of calendar weeks between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of calendar weeks\n *\n * @example\n * // How many calendar weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInCalendarWeeks(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 6, 5)\n * )\n * //=> 3\n *\n * @example\n * // If the week starts on Monday,\n * // how many calendar weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInCalendarWeeks(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 6, 5),\n *   { weekStartsOn: 1 }\n * )\n * //=> 2\n */\nexport function differenceInCalendarWeeks(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const laterStartOfWeek = startOfWeek(laterDate_, options);\n  const earlierStartOfWeek = startOfWeek(earlierDate_, options);\n\n  const laterTimestamp =\n    +laterStartOfWeek - getTimezoneOffsetInMilliseconds(laterStartOfWeek);\n  const earlierTimestamp =\n    +earlierStartOfWeek - getTimezoneOffsetInMilliseconds(earlierStartOfWeek);\n\n  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInWeek);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarWeeks;\n", "import { normalizeDates } from \"./_lib/normalizeDates.js\";\n\n/**\n * The {@link differenceInCalendarYears} function options.\n */\n\n/**\n * @name differenceInCalendarYears\n * @category Year Helpers\n * @summary Get the number of calendar years between the given dates.\n *\n * @description\n * Get the number of calendar years between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n\n * @returns The number of calendar years\n *\n * @example\n * // How many calendar years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInCalendarYears(\n *   new Date(2015, 1, 11),\n *   new Date(2013, 11, 31)\n * );\n * //=> 2\n */\nexport function differenceInCalendarYears(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n  return laterDate_.getFullYear() - earlierDate_.getFullYear();\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarYears;\n", "export function getRoundingMethod(method) {\n  return (number) => {\n    const round = method ? Math[method] : Math.trunc;\n    const result = round(number);\n    // Prevent negative zero\n    return result === 0 ? 0 : result;\n  };\n}\n", "import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { millisecondsInHour } from \"./constants.js\";\n\n/**\n * The {@link differenceInHours} function options.\n */\n\n/**\n * @name differenceInHours\n * @category Hour Helpers\n * @summary Get the number of hours between the given dates.\n *\n * @description\n * Get the number of hours between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of hours\n *\n * @example\n * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?\n * const result = differenceInHours(\n *   new Date(2014, 6, 2, 19, 0),\n *   new Date(2014, 6, 2, 6, 50)\n * )\n * //=> 12\n */\nexport function differenceInHours(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n  const diff = (+laterDate_ - +earlierDate_) / millisecondsInHour;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInHours;\n", "import { toDate } from \"./toDate.js\";\n\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n *\n * @returns The number of milliseconds\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\nexport function differenceInMilliseconds(laterDate, earlierDate) {\n  return +toDate(laterDate) - +toDate(earlierDate);\n}\n\n// Fallback for modularized imports:\nexport default differenceInMilliseconds;\n", "import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\nimport { millisecondsInMinute } from \"./constants.js\";\nimport { differenceInMilliseconds } from \"./differenceInMilliseconds.js\";\n\n/**\n * The {@link differenceInMinutes} function options.\n */\n\n/**\n * @name differenceInMinutes\n * @category Minute Helpers\n * @summary Get the number of minutes between the given dates.\n *\n * @description\n * Get the signed number of full (rounded towards 0) minutes between the given dates.\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of minutes\n *\n * @example\n * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?\n * const result = differenceInMinutes(\n *   new Date(2014, 6, 2, 12, 20, 0),\n *   new Date(2014, 6, 2, 12, 7, 59)\n * )\n * //=> 12\n *\n * @example\n * // How many minutes are between 10:01:59 and 10:00:00\n * const result = differenceInMinutes(\n *   new Date(2000, 0, 1, 10, 0, 0),\n *   new Date(2000, 0, 1, 10, 1, 59)\n * )\n * //=> -1\n */\nexport function differenceInMinutes(dateLeft, dateRight, options) {\n  const diff =\n    differenceInMilliseconds(dateLeft, dateRight) / millisecondsInMinute;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInMinutes;\n", "import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\nimport { differenceInMilliseconds } from \"./differenceInMilliseconds.js\";\n\n/**\n * The {@link differenceInSeconds} function options.\n */\n\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of seconds\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * const result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\nexport function differenceInSeconds(laterDate, earlierDate, options) {\n  const diff = differenceInMilliseconds(laterDate, earlierDate) / 1000;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInSeconds;\n", "import { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport {\n  secondsInDay,\n  secondsInHour,\n  secondsInMinute,\n  secondsInMonth,\n  secondsInQuarter,\n  secondsInWeek,\n  secondsInYear,\n} from \"./constants.js\";\nimport { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\nimport { differenceInCalendarMonths } from \"./differenceInCalendarMonths.js\";\nimport { differenceInCalendarQuarters } from \"./differenceInCalendarQuarters.js\";\nimport { differenceInCalendarWeeks } from \"./differenceInCalendarWeeks.js\";\nimport { differenceInCalendarYears } from \"./differenceInCalendarYears.js\";\nimport { differenceInHours } from \"./differenceInHours.js\";\nimport { differenceInMinutes } from \"./differenceInMinutes.js\";\nimport { differenceInSeconds } from \"./differenceInSeconds.js\";\n\n/**\n * The {@link intlFormatDistance} function options.\n */\n\n/**\n * The unit used to format the distance in {@link intlFormatDistance}.\n */\n\n/**\n * @name intlFormatDistance\n * @category Common Helpers\n * @summary Formats distance between two dates in a human-readable format\n * @description\n * The function calculates the difference between two dates and formats it as a human-readable string.\n *\n * The function will pick the most appropriate unit depending on the distance between dates. For example, if the distance is a few hours, it might return `x hours`. If the distance is a few months, it might return `x months`.\n *\n * You can also specify a unit to force using it regardless of the distance to get a result like `123456 hours`.\n *\n * See the table below for the unit picking logic:\n *\n * | Distance between dates | Result (past)  | Result (future) |\n * | ---------------------- | -------------- | --------------- |\n * | 0 seconds              | now            | now             |\n * | 1-59 seconds           | X seconds ago  | in X seconds    |\n * | 1-59 minutes           | X minutes ago  | in X minutes    |\n * | 1-23 hours             | X hours ago    | in X hours      |\n * | 1 day                  | yesterday      | tomorrow        |\n * | 2-6 days               | X days ago     | in X days       |\n * | 7 days                 | last week      | next week       |\n * | 8 days-1 month         | X weeks ago    | in X weeks      |\n * | 1 month                | last month     | next month      |\n * | 2-3 months             | X months ago   | in X months     |\n * | 1 quarter              | last quarter   | next quarter    |\n * | 2-3 quarters           | X quarters ago | in X quarters   |\n * | 1 year                 | last year      | next year       |\n * | 2+ years               | X years ago    | in X years      |\n *\n * @param laterDate - The date\n * @param earlierDate - The date to compare with.\n * @param options - An object with options.\n * See MDN for details [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation)\n * The narrow one could be similar to the short one for some locales.\n *\n * @returns The distance in words according to language-sensitive relative time formatting.\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.unit` must not be invalid Unit\n * @throws `options.locale` must not be invalid locale\n * @throws `options.localeMatcher` must not be invalid localeMatcher\n * @throws `options.numeric` must not be invalid numeric\n * @throws `options.style` must not be invalid style\n *\n * @example\n * // What is the distance between the dates when the fist date is after the second?\n * intlFormatDistance(\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   new Date(1986, 3, 4, 10, 30, 0)\n * )\n * //=> 'in 1 hour'\n *\n * // What is the distance between the dates when the fist date is before the second?\n * intlFormatDistance(\n *   new Date(1986, 3, 4, 10, 30, 0),\n *   new Date(1986, 3, 4, 11, 30, 0)\n * )\n * //=> '1 hour ago'\n *\n * @example\n * // Use the unit option to force the function to output the result in quarters. Without setting it, the example would return \"next year\"\n * intlFormatDistance(\n *   new Date(1987, 6, 4, 10, 30, 0),\n *   new Date(1986, 3, 4, 10, 30, 0),\n *   { unit: 'quarter' }\n * )\n * //=> 'in 5 quarters'\n *\n * @example\n * // Use the locale option to get the result in Spanish. Without setting it, the example would return \"in 1 hour\".\n * intlFormatDistance(\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   new Date(1986, 3, 4, 10, 30, 0),\n *   { locale: 'es' }\n * )\n * //=> 'dentro de 1 hora'\n *\n * @example\n * // Use the numeric option to force the function to use numeric values. Without setting it, the example would return \"tomorrow\".\n * intlFormatDistance(\n *   new Date(1986, 3, 5, 11, 30, 0),\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   { numeric: 'always' }\n * )\n * //=> 'in 1 day'\n *\n * @example\n * // Use the style option to force the function to use short values. Without setting it, the example would return \"in 2 years\".\n * intlFormatDistance(\n *   new Date(1988, 3, 4, 11, 30, 0),\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   { style: 'short' }\n * )\n * //=> 'in 2 yr'\n */\nexport function intlFormatDistance(laterDate, earlierDate, options) {\n  let value = 0;\n  let unit;\n\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  if (!options?.unit) {\n    // Get the unit based on diffInSeconds calculations if no unit is specified\n    const diffInSeconds = differenceInSeconds(laterDate_, earlierDate_); // The smallest unit\n\n    if (Math.abs(diffInSeconds) < secondsInMinute) {\n      value = differenceInSeconds(laterDate_, earlierDate_);\n      unit = \"second\";\n    } else if (Math.abs(diffInSeconds) < secondsInHour) {\n      value = differenceInMinutes(laterDate_, earlierDate_);\n      unit = \"minute\";\n    } else if (\n      Math.abs(diffInSeconds) < secondsInDay &&\n      Math.abs(differenceInCalendarDays(laterDate_, earlierDate_)) < 1\n    ) {\n      value = differenceInHours(laterDate_, earlierDate_);\n      unit = \"hour\";\n    } else if (\n      Math.abs(diffInSeconds) < secondsInWeek &&\n      (value = differenceInCalendarDays(laterDate_, earlierDate_)) &&\n      Math.abs(value) < 7\n    ) {\n      unit = \"day\";\n    } else if (Math.abs(diffInSeconds) < secondsInMonth) {\n      value = differenceInCalendarWeeks(laterDate_, earlierDate_);\n      unit = \"week\";\n    } else if (Math.abs(diffInSeconds) < secondsInQuarter) {\n      value = differenceInCalendarMonths(laterDate_, earlierDate_);\n      unit = \"month\";\n    } else if (Math.abs(diffInSeconds) < secondsInYear) {\n      if (differenceInCalendarQuarters(laterDate_, earlierDate_) < 4) {\n        // To filter out cases that are less than a year but match 4 quarters\n        value = differenceInCalendarQuarters(laterDate_, earlierDate_);\n        unit = \"quarter\";\n      } else {\n        value = differenceInCalendarYears(laterDate_, earlierDate_);\n        unit = \"year\";\n      }\n    } else {\n      value = differenceInCalendarYears(laterDate_, earlierDate_);\n      unit = \"year\";\n    }\n  } else {\n    // Get the value if unit is specified\n    unit = options?.unit;\n    if (unit === \"second\") {\n      value = differenceInSeconds(laterDate_, earlierDate_);\n    } else if (unit === \"minute\") {\n      value = differenceInMinutes(laterDate_, earlierDate_);\n    } else if (unit === \"hour\") {\n      value = differenceInHours(laterDate_, earlierDate_);\n    } else if (unit === \"day\") {\n      value = differenceInCalendarDays(laterDate_, earlierDate_);\n    } else if (unit === \"week\") {\n      value = differenceInCalendarWeeks(laterDate_, earlierDate_);\n    } else if (unit === \"month\") {\n      value = differenceInCalendarMonths(laterDate_, earlierDate_);\n    } else if (unit === \"quarter\") {\n      value = differenceInCalendarQuarters(laterDate_, earlierDate_);\n    } else if (unit === \"year\") {\n      value = differenceInCalendarYears(laterDate_, earlierDate_);\n    }\n  }\n\n  const rtf = new Intl.RelativeTimeFormat(options?.locale, {\n    numeric: \"auto\",\n    ...options,\n  });\n\n  return rtf.format(value, unit);\n}\n\n// Fallback for modularized imports:\nexport default intlFormatDistance;\n", "import {intlFormatDistance} from 'date-fns'\n\nwindow.customElements.define('x-timeago', class extends HTMLElement {\n    t: number | null = null;\n    d: Date;\n    l: string;\n\n    // noinspection JSUnusedGlobalSymbols\n    connectedCallback() {\n        try {\n            this.d = new Date(this.dataset.datetime);\n            this.l = this.dataset.locale || document.documentElement.lang || new Intl.DateTimeFormat().resolvedOptions().locale;\n        } catch (e) {\n            console.error(e);\n            return;\n        }\n\n        if (!this.title) {\n            this.title = this.d.toLocaleString(this.l);\n        }\n\n        this.set();\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    disconnectedCallback() {\n        clearTimeout(this.t);\n    }\n\n    set() {\n        const now = new Date();\n        const diff = Math.abs(now.getTime() - this.d.getTime());\n\n        this.textContent = intlFormatDistance(this.d, now, {\n            locale: this.l,\n        });\n\n        this.t = setTimeout(() => this.set(), diff < 60000 ? 1000 : 60000);\n    }\n});"],
  "mappings": "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",
  "names": ["maxTime", "minTime", "millisecondsInWeek", "millisecondsInDay", "millisecondsInMinute", "millisecondsInHour", "secondsInHour", "secondsInMinute", "secondsInDay", "secondsInWeek", "secondsInYear", "secondsInMonth", "secondsInQuarter", "constructFromSymbol", "constructFrom", "date", "value", "constructFromSymbol", "toDate", "argument", "context", "constructFrom", "defaultOptions", "getDefaultOptions", "startOfWeek", "date", "options", "_a", "_b", "_c", "_d", "_e", "_f", "_g", "_h", "defaultOptions", "getDefaultOptions", "weekStartsOn", "_date", "toDate", "day", "diff", "getTimezoneOffsetInMilliseconds", "date", "_date", "toDate", "utcDate", "normalizeDates", "context", "dates", "normalize", "constructFrom", "date", "startOfDay", "date", "options", "_date", "toDate", "differenceInCalendarDays", "laterDate", "earlierDate", "options", "laterDate_", "earlierDate_", "normalizeDates", "laterStartOfDay", "startOfDay", "earlierStartOfDay", "laterTimestamp", "getTimezoneOffsetInMilliseconds", "earlierTimestamp", "millisecondsInDay", "differenceInCalendarMonths", "laterDate", "earlierDate", "options", "laterDate_", "earlierDate_", "normalizeDates", "yearsDiff", "monthsDiff", "getQuarter", "date", "options", "_date", "toDate", "differenceInCalendarQuarters", "laterDate", "earlierDate", "options", "laterDate_", "earlierDate_", "normalizeDates", "yearsDiff", "quartersDiff", "getQuarter", "differenceInCalendarWeeks", "laterDate", "earlierDate", "options", "laterDate_", "earlierDate_", "normalizeDates", "laterStartOfWeek", "startOfWeek", "earlierStartOfWeek", "laterTimestamp", "getTimezoneOffsetInMilliseconds", "earlierTimestamp", "millisecondsInWeek", "differenceInCalendarYears", "laterDate", "earlierDate", "options", "laterDate_", "earlierDate_", "normalizeDates", "getRoundingMethod", "method", "number", "result", "differenceInHours", "laterDate", "earlierDate", "options", "laterDate_", "earlierDate_", "normalizeDates", "diff", "millisecondsInHour", "getRoundingMethod", "differenceInMilliseconds", "laterDate", "earlierDate", "toDate", "differenceInMinutes", "dateLeft", "dateRight", "options", "diff", "differenceInMilliseconds", "millisecondsInMinute", "getRoundingMethod", "differenceInSeconds", "laterDate", "earlierDate", "options", "diff", "differenceInMilliseconds", "getRoundingMethod", "intlFormatDistance", "laterDate", "earlierDate", "options", "value", "unit", "laterDate_", "earlierDate_", "normalizeDates", "differenceInSeconds", "differenceInMinutes", "differenceInHours", "differenceInCalendarDays", "differenceInCalendarWeeks", "differenceInCalendarMonths", "differenceInCalendarQuarters", "differenceInCalendarYears", "diffInSeconds", "secondsInMinute", "secondsInHour", "secondsInDay", "secondsInWeek", "secondsInMonth", "secondsInQuarter", "secondsInYear", "__spreadValues", "__publicField", "e", "now", "diff", "intlFormatDistance"]
}
